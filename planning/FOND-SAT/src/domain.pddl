(define (domain beam-walk)
  (:requirements :typing :strips :non-deterministic)
  (:types location)
  (:predicates (up) (position ?p - location) (next-fwd ?p1 - location ?p2 - location) (next-bwd ?p1 - location ?p2 - location) (ladder-at ?p - location) (turnDomain) (q2 ?p38 - location) (q3 ?p38 - location) (q1 ?p38 - location))
  (:action walk-on-beam
    :parameters (?from - location ?to - location)
    :precondition (and (up) (position ?from) (next-fwd ?from ?to) (turnDomain))
    :effect (and (oneof (and (position ?to) (not (position ?from))) (and (not (up)) (position ?to) (not (position ?from)))) (not (turnDomain)))
  )
  (:action walk
    :parameters (?from - location ?to - location)
    :precondition (and (not (up)) (position ?from) (next-bwd ?from ?to) (turnDomain))
    :effect (and (position ?to) (not (position ?from)) (not (turnDomain)))
  )
  (:action climb
    :parameters (?p - location)
    :precondition (and (not (up)) (position ?p) (ladder-at ?p) (turnDomain))
    :effect (and (up) (not (turnDomain)))
  )
  (:action trans-0
    :parameters (?p38 - location)
    :precondition (and (or (and (q1 ?p38) (not (position ?p38))) (and (q1 ?p38) (position ?p38) (not (up))) (and (q2 ?p38) (not (position ?p38))) (and (q2 ?p38) (position ?p38) (not (up)))) (not (turnDomain)))
    :effect (and (q2 ?p38) (not (q3 ?p38)) (not (q1 ?p38)) (turnDomain))
  )
  (:action trans-1
    :parameters (?p38 - location)
    :precondition (and (or (and (q1 ?p38) (position ?p38) (up)) (and (q2 ?p38) (position ?p38) (up)) (q3 ?p38)) (not (turnDomain)))
    :effect (and (q3 ?p38) (not (q2 ?p38)) (not (q1 ?p38)) (turnDomain))
  )
)